AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Exported by architect/package@8.5.0 on 2023-07-10T01:04:20.716Z
Resources:
  Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      Policies:
      - PolicyName: ArcGlobalPolicy
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            - logs:DescribeLogStreams
            Resource: arn:aws:logs:*:*:*
      - PolicyName: ArcStaticBucketPolicy
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
            - s3:GetObject
            - s3:PutObject
            - s3:PutObjectAcl
            - s3:DeleteObject
            - s3:ListBucket
            Resource:
            - Fn::Sub:
              - arn:aws:s3:::${bukkit}
              - bukkit:
                  Ref: StaticBucket
            - Fn::Sub:
              - arn:aws:s3:::${bukkit}/*
              - bukkit:
                  Ref: StaticBucket
      - PolicyName: ArcDynamoPolicy
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action: dynamodb:*
            Resource:
            - Fn::Sub:
              - arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tablename}
              - tablename:
                  Ref: UsersTable
            - Fn::Sub:
              - arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tablename}/*
              - tablename:
                  Ref: UsersTable
            - Fn::Sub:
              - arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tablename}
              - tablename:
                  Ref: StoresTable
            - Fn::Sub:
              - arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tablename}/*
              - tablename:
                  Ref: StoresTable
            - Fn::Sub:
              - arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tablename}
              - tablename:
                  Ref: ProductsTable
            - Fn::Sub:
              - arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tablename}/*
              - tablename:
                  Ref: ProductsTable
          - Effect: Deny
            Action: dynamodb:DeleteTable
            Resource:
              Fn::Sub: arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/*
  UsersParam:
    Type: AWS::SSM::Parameter
    Properties:
      Type: String
      Name:
        Fn::Sub:
        - /${AWS::StackName}/tables/${tablename}
        - tablename: users
      Value:
        Ref: UsersTable
  StoresParam:
    Type: AWS::SSM::Parameter
    Properties:
      Type: String
      Name:
        Fn::Sub:
        - /${AWS::StackName}/tables/${tablename}
        - tablename: stores
      Value:
        Ref: StoresTable
  ProductsParam:
    Type: AWS::SSM::Parameter
    Properties:
      Type: String
      Name:
        Fn::Sub:
        - /${AWS::StackName}/tables/${tablename}
        - tablename: products
      Value:
        Ref: ProductsTable
  StaticBucketParam:
    Type: AWS::SSM::Parameter
    Properties:
      Type: String
      Name:
        Fn::Sub:
        - /${AWS::StackName}/static/${key}
        - key: bucket
      Value:
        Ref: StaticBucket
  StaticFingerprintParam:
    Type: AWS::SSM::Parameter
    Properties:
      Type: String
      Name:
        Fn::Sub:
        - /${AWS::StackName}/static/${key}
        - key: fingerprint
      Value: 'false'
  ParameterStorePolicy:
    Type: AWS::IAM::Policy
    DependsOn: Role
    Properties:
      PolicyName: ArcParameterStorePolicy
      PolicyDocument:
        Statement:
        - Effect: Allow
          Action:
          - ssm:GetParametersByPath
          - ssm:GetParameter
          Resource:
            Fn::Sub:
            - arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${AWS::StackName}
            - {}
        - Effect: Allow
          Action:
          - ssm:GetParametersByPath
          - ssm:GetParameter
          Resource:
            Fn::Sub:
            - arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${AWS::StackName}/*
            - {}
        - Effect: Allow
          Action:
          - ssm:GetParametersByPath
          - ssm:GetParameter
          Resource:
            Fn::Sub:
            - arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${AWS::StackName}/*/*
            - {}
      Roles:
      - Ref: Role
  HTTP:
    Type: AWS::Serverless::HttpApi
    Properties:
      StageName: $default
      DefinitionBody:
        openapi: 3.0.1
        info:
          title:
            Ref: AWS::StackName
        paths:
          /products/{storeid}:
            get:
              x-amazon-apigateway-integration:
                payloadFormatVersion: '2.0'
                type: aws_proxy
                httpMethod: POST
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetProductsStoreidHTTPLambda.Arn}/invocations
                connectionType: INTERNET
          /stores/{slug}:
            get:
              x-amazon-apigateway-integration:
                payloadFormatVersion: '2.0'
                type: aws_proxy
                httpMethod: POST
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetStoresSlugHTTPLambda.Arn}/invocations
                connectionType: INTERNET
          /stores:
            get:
              x-amazon-apigateway-integration:
                payloadFormatVersion: '2.0'
                type: aws_proxy
                httpMethod: POST
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetStoresHTTPLambda.Arn}/invocations
                connectionType: INTERNET
            post:
              x-amazon-apigateway-integration:
                payloadFormatVersion: '2.0'
                type: aws_proxy
                httpMethod: POST
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PostStoresHTTPLambda.Arn}/invocations
                connectionType: INTERNET
            patch:
              x-amazon-apigateway-integration:
                payloadFormatVersion: '2.0'
                type: aws_proxy
                httpMethod: POST
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PatchStoresHTTPLambda.Arn}/invocations
                connectionType: INTERNET
            delete:
              x-amazon-apigateway-integration:
                payloadFormatVersion: '2.0'
                type: aws_proxy
                httpMethod: POST
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DeleteStoresHTTPLambda.Arn}/invocations
                connectionType: INTERNET
          /user:
            get:
              x-amazon-apigateway-integration:
                payloadFormatVersion: '2.0'
                type: aws_proxy
                httpMethod: POST
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetUserHTTPLambda.Arn}/invocations
                connectionType: INTERNET
            post:
              x-amazon-apigateway-integration:
                payloadFormatVersion: '2.0'
                type: aws_proxy
                httpMethod: POST
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PostUserHTTPLambda.Arn}/invocations
                connectionType: INTERNET
          /:
            get:
              x-amazon-apigateway-integration:
                payloadFormatVersion: '2.0'
                type: aws_proxy
                httpMethod: POST
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetIndexHTTPLambda.Arn}/invocations
                connectionType: INTERNET
          /login:
            post:
              x-amazon-apigateway-integration:
                payloadFormatVersion: '2.0'
                type: aws_proxy
                httpMethod: POST
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PostLoginHTTPLambda.Arn}/invocations
                connectionType: INTERNET
          /products:
            post:
              x-amazon-apigateway-integration:
                payloadFormatVersion: '2.0'
                type: aws_proxy
                httpMethod: POST
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PostProductsHTTPLambda.Arn}/invocations
                connectionType: INTERNET
            delete:
              x-amazon-apigateway-integration:
                payloadFormatVersion: '2.0'
                type: aws_proxy
                httpMethod: POST
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DeleteProductsHTTPLambda.Arn}/invocations
                connectionType: INTERNET
          /products/{productid}:
            put:
              x-amazon-apigateway-integration:
                payloadFormatVersion: '2.0'
                type: aws_proxy
                httpMethod: POST
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PutProductsProductidHTTPLambda.Arn}/invocations
                connectionType: INTERNET
          /_static/{proxy+}:
            get:
              x-amazon-apigateway-integration:
                payloadFormatVersion: '1.0'
                type: http_proxy
                httpMethod: GET
                uri:
                  Fn::Sub:
                  - https://${bukkit}.s3.${AWS::Region}.amazonaws.com/{proxy}
                  - bukkit:
                      Ref: StaticBucket
                connectionType: INTERNET
                timeoutInMillis: 30000
  GetProductsStoreidHTTPLambda:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      CodeUri: s3://lojanabio-cfn-deployments-9d488/7d9ee7ad28372391e376951ba5bf3071
      Runtime: nodejs16.x
      Architectures:
      - arm64
      MemorySize: 1152
      EphemeralStorage:
        Size: 512
      Timeout: 5
      Environment:
        Variables:
          ARC_APP_NAME: lojanabio
          ARC_ENV: staging
          ARC_ROLE:
            Ref: Role
          ARC_SESSION_TABLE_NAME: jwe
          ARC_STACK_NAME:
            Ref: AWS::StackName
          ARC_STATIC_BUCKET:
            Ref: StaticBucket
      Role:
        Fn::Sub:
        - arn:aws:iam::${AWS::AccountId}:role/${roleName}
        - roleName:
            Ref: Role
      Events:
        GetProductsStoreidHTTPEvent:
          Type: HttpApi
          Properties:
            Path: /products/{storeid}
            Method: GET
            ApiId:
              Ref: HTTP
    ArcMetadata:
      pragma: http
      name: get /products/:storeid
      method: get
      path: /products/:storeid
  GetStoresSlugHTTPLambda:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      CodeUri: s3://lojanabio-cfn-deployments-9d488/aa2a1c405a38b8e30bd8c9a262732b68
      Runtime: nodejs16.x
      Architectures:
      - arm64
      MemorySize: 1152
      EphemeralStorage:
        Size: 512
      Timeout: 5
      Environment:
        Variables:
          ARC_APP_NAME: lojanabio
          ARC_ENV: staging
          ARC_ROLE:
            Ref: Role
          ARC_SESSION_TABLE_NAME: jwe
          ARC_STACK_NAME:
            Ref: AWS::StackName
          ARC_STATIC_BUCKET:
            Ref: StaticBucket
      Role:
        Fn::Sub:
        - arn:aws:iam::${AWS::AccountId}:role/${roleName}
        - roleName:
            Ref: Role
      Events:
        GetStoresSlugHTTPEvent:
          Type: HttpApi
          Properties:
            Path: /stores/{slug}
            Method: GET
            ApiId:
              Ref: HTTP
    ArcMetadata:
      pragma: http
      name: get /stores/:slug
      method: get
      path: /stores/:slug
  GetStoresHTTPLambda:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      CodeUri: s3://lojanabio-cfn-deployments-9d488/5e79263038483cf31cceb2f26ac78c29
      Runtime: nodejs16.x
      Architectures:
      - arm64
      MemorySize: 1152
      EphemeralStorage:
        Size: 512
      Timeout: 5
      Environment:
        Variables:
          ARC_APP_NAME: lojanabio
          ARC_ENV: staging
          ARC_ROLE:
            Ref: Role
          ARC_SESSION_TABLE_NAME: jwe
          ARC_STACK_NAME:
            Ref: AWS::StackName
          ARC_STATIC_BUCKET:
            Ref: StaticBucket
      Role:
        Fn::Sub:
        - arn:aws:iam::${AWS::AccountId}:role/${roleName}
        - roleName:
            Ref: Role
      Events:
        GetStoresHTTPEvent:
          Type: HttpApi
          Properties:
            Path: /stores
            Method: GET
            ApiId:
              Ref: HTTP
    ArcMetadata:
      pragma: http
      name: get /stores
      method: get
      path: /stores
  GetUserHTTPLambda:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      CodeUri: s3://lojanabio-cfn-deployments-9d488/625a27e358fdbe66a19ac3971b245e35
      Runtime: nodejs16.x
      Architectures:
      - arm64
      MemorySize: 1152
      EphemeralStorage:
        Size: 512
      Timeout: 5
      Environment:
        Variables:
          ARC_APP_NAME: lojanabio
          ARC_ENV: staging
          ARC_ROLE:
            Ref: Role
          ARC_SESSION_TABLE_NAME: jwe
          ARC_STACK_NAME:
            Ref: AWS::StackName
          ARC_STATIC_BUCKET:
            Ref: StaticBucket
      Role:
        Fn::Sub:
        - arn:aws:iam::${AWS::AccountId}:role/${roleName}
        - roleName:
            Ref: Role
      Events:
        GetUserHTTPEvent:
          Type: HttpApi
          Properties:
            Path: /user
            Method: GET
            ApiId:
              Ref: HTTP
    ArcMetadata:
      pragma: http
      name: get /user
      method: get
      path: /user
  GetIndexHTTPLambda:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      CodeUri: s3://lojanabio-cfn-deployments-9d488/6b9b8dc4dd9903bc306e323e964c9ec7
      Runtime: nodejs16.x
      Architectures:
      - arm64
      MemorySize: 1152
      EphemeralStorage:
        Size: 512
      Timeout: 5
      Environment:
        Variables:
          ARC_APP_NAME: lojanabio
          ARC_ENV: staging
          ARC_ROLE:
            Ref: Role
          ARC_SESSION_TABLE_NAME: jwe
          ARC_STACK_NAME:
            Ref: AWS::StackName
          ARC_STATIC_BUCKET:
            Ref: StaticBucket
          ARC_STATIC_SPA: false
      Role:
        Fn::Sub:
        - arn:aws:iam::${AWS::AccountId}:role/${roleName}
        - roleName:
            Ref: Role
      Events:
        GetIndexHTTPEvent:
          Type: HttpApi
          Properties:
            Path: /
            Method: GET
            ApiId:
              Ref: HTTP
    ArcMetadata:
      pragma: http
      name: get /
      method: get
      path: /
  PostLoginHTTPLambda:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      CodeUri: s3://lojanabio-cfn-deployments-9d488/97b2a5f69f14a25c614b84c566984534
      Runtime: nodejs16.x
      Architectures:
      - arm64
      MemorySize: 1152
      EphemeralStorage:
        Size: 512
      Timeout: 5
      Environment:
        Variables:
          ARC_APP_NAME: lojanabio
          ARC_ENV: staging
          ARC_ROLE:
            Ref: Role
          ARC_SESSION_TABLE_NAME: jwe
          ARC_STACK_NAME:
            Ref: AWS::StackName
          ARC_STATIC_BUCKET:
            Ref: StaticBucket
      Role:
        Fn::Sub:
        - arn:aws:iam::${AWS::AccountId}:role/${roleName}
        - roleName:
            Ref: Role
      Events:
        PostLoginHTTPEvent:
          Type: HttpApi
          Properties:
            Path: /login
            Method: POST
            ApiId:
              Ref: HTTP
    ArcMetadata:
      pragma: http
      name: post /login
      method: post
      path: /login
  PostProductsHTTPLambda:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      CodeUri: s3://lojanabio-cfn-deployments-9d488/f849ce770fa7c437eb49c32a9cdca039
      Runtime: nodejs16.x
      Architectures:
      - arm64
      MemorySize: 1152
      EphemeralStorage:
        Size: 512
      Timeout: 5
      Environment:
        Variables:
          ARC_APP_NAME: lojanabio
          ARC_ENV: staging
          ARC_ROLE:
            Ref: Role
          ARC_SESSION_TABLE_NAME: jwe
          ARC_STACK_NAME:
            Ref: AWS::StackName
          ARC_STATIC_BUCKET:
            Ref: StaticBucket
      Role:
        Fn::Sub:
        - arn:aws:iam::${AWS::AccountId}:role/${roleName}
        - roleName:
            Ref: Role
      Events:
        PostProductsHTTPEvent:
          Type: HttpApi
          Properties:
            Path: /products
            Method: POST
            ApiId:
              Ref: HTTP
    ArcMetadata:
      pragma: http
      name: post /products
      method: post
      path: /products
  PostStoresHTTPLambda:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      CodeUri: s3://lojanabio-cfn-deployments-9d488/39747de49400d6ba8637584755410063
      Runtime: nodejs16.x
      Architectures:
      - arm64
      MemorySize: 1152
      EphemeralStorage:
        Size: 512
      Timeout: 5
      Environment:
        Variables:
          ARC_APP_NAME: lojanabio
          ARC_ENV: staging
          ARC_ROLE:
            Ref: Role
          ARC_SESSION_TABLE_NAME: jwe
          ARC_STACK_NAME:
            Ref: AWS::StackName
          ARC_STATIC_BUCKET:
            Ref: StaticBucket
      Role:
        Fn::Sub:
        - arn:aws:iam::${AWS::AccountId}:role/${roleName}
        - roleName:
            Ref: Role
      Events:
        PostStoresHTTPEvent:
          Type: HttpApi
          Properties:
            Path: /stores
            Method: POST
            ApiId:
              Ref: HTTP
    ArcMetadata:
      pragma: http
      name: post /stores
      method: post
      path: /stores
  PostUserHTTPLambda:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      CodeUri: s3://lojanabio-cfn-deployments-9d488/2fe1c78464988da3d26e1ca443871afa
      Runtime: nodejs16.x
      Architectures:
      - arm64
      MemorySize: 1152
      EphemeralStorage:
        Size: 512
      Timeout: 5
      Environment:
        Variables:
          ARC_APP_NAME: lojanabio
          ARC_ENV: staging
          ARC_ROLE:
            Ref: Role
          ARC_SESSION_TABLE_NAME: jwe
          ARC_STACK_NAME:
            Ref: AWS::StackName
          ARC_STATIC_BUCKET:
            Ref: StaticBucket
      Role:
        Fn::Sub:
        - arn:aws:iam::${AWS::AccountId}:role/${roleName}
        - roleName:
            Ref: Role
      Events:
        PostUserHTTPEvent:
          Type: HttpApi
          Properties:
            Path: /user
            Method: POST
            ApiId:
              Ref: HTTP
    ArcMetadata:
      pragma: http
      name: post /user
      method: post
      path: /user
  PutProductsProductidHTTPLambda:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      CodeUri: s3://lojanabio-cfn-deployments-9d488/ea1659c30f5eefe76aaaddcaa13f66fc
      Runtime: nodejs16.x
      Architectures:
      - arm64
      MemorySize: 1152
      EphemeralStorage:
        Size: 512
      Timeout: 5
      Environment:
        Variables:
          ARC_APP_NAME: lojanabio
          ARC_ENV: staging
          ARC_ROLE:
            Ref: Role
          ARC_SESSION_TABLE_NAME: jwe
          ARC_STACK_NAME:
            Ref: AWS::StackName
          ARC_STATIC_BUCKET:
            Ref: StaticBucket
      Role:
        Fn::Sub:
        - arn:aws:iam::${AWS::AccountId}:role/${roleName}
        - roleName:
            Ref: Role
      Events:
        PutProductsProductidHTTPEvent:
          Type: HttpApi
          Properties:
            Path: /products/{productid}
            Method: PUT
            ApiId:
              Ref: HTTP
    ArcMetadata:
      pragma: http
      name: put /products/:productid
      method: put
      path: /products/:productid
  PatchStoresHTTPLambda:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      CodeUri: s3://lojanabio-cfn-deployments-9d488/d88f522129701cf75ae8dbe305663abf
      Runtime: nodejs16.x
      Architectures:
      - arm64
      MemorySize: 1152
      EphemeralStorage:
        Size: 512
      Timeout: 5
      Environment:
        Variables:
          ARC_APP_NAME: lojanabio
          ARC_ENV: staging
          ARC_ROLE:
            Ref: Role
          ARC_SESSION_TABLE_NAME: jwe
          ARC_STACK_NAME:
            Ref: AWS::StackName
          ARC_STATIC_BUCKET:
            Ref: StaticBucket
      Role:
        Fn::Sub:
        - arn:aws:iam::${AWS::AccountId}:role/${roleName}
        - roleName:
            Ref: Role
      Events:
        PatchStoresHTTPEvent:
          Type: HttpApi
          Properties:
            Path: /stores
            Method: PATCH
            ApiId:
              Ref: HTTP
    ArcMetadata:
      pragma: http
      name: patch /stores
      method: patch
      path: /stores
  DeleteProductsHTTPLambda:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      CodeUri: s3://lojanabio-cfn-deployments-9d488/296d77350a065c23f5ce8ca3b10c3aac
      Runtime: nodejs16.x
      Architectures:
      - arm64
      MemorySize: 1152
      EphemeralStorage:
        Size: 512
      Timeout: 5
      Environment:
        Variables:
          ARC_APP_NAME: lojanabio
          ARC_ENV: staging
          ARC_ROLE:
            Ref: Role
          ARC_SESSION_TABLE_NAME: jwe
          ARC_STACK_NAME:
            Ref: AWS::StackName
          ARC_STATIC_BUCKET:
            Ref: StaticBucket
      Role:
        Fn::Sub:
        - arn:aws:iam::${AWS::AccountId}:role/${roleName}
        - roleName:
            Ref: Role
      Events:
        DeleteProductsHTTPEvent:
          Type: HttpApi
          Properties:
            Path: /products
            Method: DELETE
            ApiId:
              Ref: HTTP
    ArcMetadata:
      pragma: http
      name: delete /products
      method: delete
      path: /products
  DeleteStoresHTTPLambda:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      CodeUri: s3://lojanabio-cfn-deployments-9d488/e22fe933752927957852e2b265174cf8
      Runtime: nodejs16.x
      Architectures:
      - arm64
      MemorySize: 1152
      EphemeralStorage:
        Size: 512
      Timeout: 5
      Environment:
        Variables:
          ARC_APP_NAME: lojanabio
          ARC_ENV: staging
          ARC_ROLE:
            Ref: Role
          ARC_SESSION_TABLE_NAME: jwe
          ARC_STACK_NAME:
            Ref: AWS::StackName
          ARC_STATIC_BUCKET:
            Ref: StaticBucket
      Role:
        Fn::Sub:
        - arn:aws:iam::${AWS::AccountId}:role/${roleName}
        - roleName:
            Ref: Role
      Events:
        DeleteStoresHTTPEvent:
          Type: HttpApi
          Properties:
            Path: /stores
            Method: DELETE
            ApiId:
              Ref: HTTP
    ArcMetadata:
      pragma: http
      name: delete /stores
      method: delete
      path: /stores
  UsersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      KeySchema:
      - AttributeName: userID
        KeyType: HASH
      - AttributeName: email
        KeyType: RANGE
      AttributeDefinitions:
      - AttributeName: userID
        AttributeType: S
      - AttributeName: email
        AttributeType: S
      BillingMode: PAY_PER_REQUEST
  StoresTable:
    Type: AWS::DynamoDB::Table
    Properties:
      KeySchema:
      - AttributeName: storeID
        KeyType: HASH
      - AttributeName: userID
        KeyType: RANGE
      AttributeDefinitions:
      - AttributeName: storeID
        AttributeType: S
      - AttributeName: userID
        AttributeType: S
      BillingMode: PAY_PER_REQUEST
  ProductsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      KeySchema:
      - AttributeName: productID
        KeyType: HASH
      - AttributeName: storeID
        KeyType: RANGE
      AttributeDefinitions:
      - AttributeName: productID
        AttributeType: S
      - AttributeName: storeID
        AttributeType: S
      BillingMode: PAY_PER_REQUEST
  StaticBucket:
    Type: AWS::S3::Bucket
    Properties:
      OwnershipControls:
        Rules:
        - ObjectOwnership: BucketOwnerEnforced
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: 404.html
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
  StaticBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket:
        Ref: StaticBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Action:
          - s3:GetObject
          Effect: Allow
          Principal: '*'
          Resource:
          - Fn::Sub:
            - arn:aws:s3:::${bukkit}/*
            - bukkit:
                Ref: StaticBucket
          Sid: PublicReadGetObject
Outputs:
  API:
    Description: API Gateway (HTTP)
    Value:
      Fn::Sub:
      - https://${ApiId}.execute-api.${AWS::Region}.amazonaws.com
      - ApiId:
          Ref: HTTP
  ApiId:
    Description: API ID (ApiId)
    Value:
      Ref: HTTP
  BucketURL:
    Description: Bucket URL
    Value:
      Fn::Sub:
      - http://${bukkit}.s3-website-${AWS::Region}.amazonaws.com
      - bukkit:
          Ref: StaticBucket
